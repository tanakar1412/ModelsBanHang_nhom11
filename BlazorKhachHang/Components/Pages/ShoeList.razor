@page "/shoelist"
@rendermode InteractiveServer
@using Data.Models
@using BlazorKhachHang.Service.IService
@using API.Models.DTO
@inject IGiayService service
@inject NavigationManager manager
@inject IJSRuntime JS

<link href="css/shoelist.css" rel="stylesheet">

<h3 class="breadcrumb-wrapper">
    <div class="breadcrumb"><h2>Shoe List</h2></div>
</h3>

<main class="container">
    <aside class="filter">
		<strong>Thương Hiệu</strong><br />

        @foreach (var brand in brandList)
        {
            <label>
                <input type="checkbox"
                       checked="@(IsBrandSelected.ContainsKey(brand) && IsBrandSelected[brand])"
                       @onchange="(e) => OnBrandChanged(brand, (bool)e.Value!)" />
                @brand
            </label>
            <br />
        }

        <div class="filter-group">
            <strong>Khoảng Giá</strong><br />
            @foreach (var range in priceRanges)
            {
                <label>
                    <input type="checkbox"
                           value="@range.Label"
                           @onchange="@(() => OnPriceRangeChanged(range.Label))"
                           checked="@selectedPriceLabels.Contains(range.Label)" />
                    @range.Label
                </label>

                <br />
            }
        </div>


        <div class="filter-group">
            <strong>Màu Sắc</strong>
            <div class="color-options">
                @foreach (var color in colorList)
                {
                    <span class="color @(selectedColors.Contains(color) ? "selected" : "")"
                          style="background: @color;"
                          @onclick="() => OnColorFilterChanged(color)">
                    </span>
                }
            </div>
        </div>

    </aside>

    <section class="product-section">
        <div class="section-header">
            <input type="text" class="search-input" placeholder="Tìm theo tên giày..." @bind="searchKeyword" @bind:event="oninput" />

            <select class="sort-dropdown">
                <option>Best selling</option>
                <option>Price: Low to High</option>
                <option>Price: High to Low</option>
            </select>
        </div>

        <div class="product-grid">
            @if (giayList != null && giayList.Count > 0)
            {
                @foreach (var giay in giayList.Where(g => g.TrangThai && g.ChiTietGiays != null && g.ChiTietGiays.Any()))
                {
                    var firstChiTiet = giay.ChiTietGiays.FirstOrDefault();
                    var groupByColor = giay.ChiTietGiays
                        .Where(c => !string.IsNullOrWhiteSpace(c.TenMau))
                        .GroupBy(c => c.TenMau!)
                        .ToList();

                    if (firstChiTiet != null)
                    {
                        <div class="product-card" style="cursor: pointer;" @onclick="@(() => NavigateToDetail(giay.GiayId))">
                            <div class="product-img-container">
                                <img src="@($"https://localhost:7246/{(string.IsNullOrEmpty(firstChiTiet.AnhGiay) ? "images/no-image.png" : firstChiTiet.AnhGiay.TrimStart('/'))}")"
                                     alt="Product Image"
                                     onerror="this.onerror=null;this.src='/images/no-image.png';" />

                                <div class="discount-badge">-10%</div>
                               @*  <div class="favorite-btn"><i class="far fa-heart"></i></div> *@
                            </div>

                            <div class="product-info">
                                <p class="brand">@giay.TenGiay</p>
                                <p class="rating">
                                    <span class="stars">★★★★☆</span>
                                    <span class="count">(17523)</span>
                                </p>

                                <div class="bottom-info">
                                    <span class="price">
                                        $<span class="main">@firstChiTiet.Gia.ToString("N0")</span><sup>đ</sup>
                                    </span>
                                    <span class="sold">@giay.TenTheLoaiGiay</span>
                                </div>

                                <div class="color-size-list mt-2">
                                    @foreach (var group in groupByColor)
                                    {
                                        var tenMau = group.FirstOrDefault()?.TenMau ?? "Không xác định";
                                        <div class="mb-1">
                                            <div class="d-flex align-items-center mb-1">
                                                <span class="color me-2" style="background:@ConvertTenMauToColor(tenMau)"></span>
                                                <span>
                                                    @foreach (var item in group.OrderBy(x => x.size))
                                                    {
                                                        <span class="badge bg-secondary me-1">@item.size</span>
                                                    }
                                                </span>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                }
            }
            else
            {
                <p>Không có sản phẩm nào...</p>
            }
        </div>
    </section>
</main>

@code {
    private List<GiayDTO> giayList = new();
    private List<GiayDTO> allGiayList = new();

    private HashSet<string> selectedBrands = new();
    private Dictionary<string, bool> IsBrandSelected = new();
    private List<string> brandList = new() { "Nike", "Adidas", "Puma", "Skechers", "Vans" };

    private List<(string Label, decimal? Min, decimal? Max)> priceRanges = new()
    {
        ("Under 200.000đ ", null, 200_000),
        ("200.000đ - 500.000đ ", 200_000, 500_000),
        ("500.000đ - 1.000.000đ", 500_000, 1_000_000),
        ("1.000.000đ - 1.500.000đ", 1_000_000, 1_500_000),
        ("1.500.000đ - 2.000.000đ", 1_500_000, 2_000_000),
        ("Under 5.000.000đ", null, 5_000_000),
    };
    private HashSet<string> selectedPriceLabels = new();

    private List<string> colorList = new() { "red", "green", "blue", "yellow", "black", "white" };
    private HashSet<string> selectedColors = new();

    private string _searchKeyword = "";
    private string searchKeyword
    //ahihi
    {
        get => _searchKeyword;
        set
        {
            _searchKeyword = value;
            FilterGiayList();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        allGiayList = await service.GetAllAsync();

        foreach (var brand in brandList)
        {
            IsBrandSelected[brand] = false;
        }

        FilterGiayList();
    }

    private void FilterGiayList()
    {
        IEnumerable<GiayDTO> query = allGiayList;

        // 🔍 Lọc theo từ khóa tên giày
        if (!string.IsNullOrWhiteSpace(searchKeyword))
        {
            query = query.Where(g =>
                !string.IsNullOrEmpty(g.TenGiay) &&
                g.TenGiay.Contains(searchKeyword, StringComparison.OrdinalIgnoreCase));
        }

        // 🏷 Lọc theo thương hiệu
        selectedBrands = IsBrandSelected
            .Where(x => x.Value)
            .Select(x => x.Key)
            .ToHashSet();

        if (selectedBrands.Any())
        {
            query = query.Where(g =>
                !string.IsNullOrEmpty(g.TenThuongHieu) &&
                selectedBrands.Contains(g.TenThuongHieu));
        }

        // 💰 Lọc theo khoảng giá
        if (selectedPriceLabels.Any())
        {
            query = query.Where(g =>
            {
                var firstPrice = (decimal)(g.ChiTietGiays.FirstOrDefault()?.Gia ?? 0);
                return priceRanges.Any(range =>
                    selectedPriceLabels.Contains(range.Label) &&
                    (!range.Min.HasValue || firstPrice >= range.Min.Value) &&
                    (!range.Max.HasValue || firstPrice <= range.Max.Value));
            });
        }
        if (selectedColors.Any())
        {
            query = query.Where(g =>
                g.ChiTietGiays != null &&
                g.ChiTietGiays.Any(ct => selectedColors.Contains(ConvertTenMauToColor(ct.TenMau ?? "")))
            );
        }


        giayList = query.ToList();
    }

    private void OnBrandChanged(string brand, bool isChecked)
    {
        IsBrandSelected[brand] = isChecked;
        FilterGiayList();
    }

    private void OnPriceRangeChanged(string label)
    {
        if (selectedPriceLabels.Contains(label))
            selectedPriceLabels.Remove(label);
        else
            selectedPriceLabels.Add(label);

        FilterGiayList();
    }
    private void OnColorFilterChanged(string color)
    {
        if (selectedColors.Contains(color))
            selectedColors.Remove(color);
        else
            selectedColors.Add(color);

        FilterGiayList();
    }


    private void NavigateToDetail(Guid giayId)
    {
        manager.NavigateTo($"/detailShoeCategory/{giayId}");
    }

    private string ConvertTenMauToColor(string tenMau)
    {
        return tenMau.ToLower() switch
        {
            "đen" => "black",
            "đỏ" => "red",
            "trắng" => "white",
            "vàng" => "yellow",
            "xanh dương" => "blue",
            "xanh lá" => "green",
            _ => "grey"
        };
    }
}

