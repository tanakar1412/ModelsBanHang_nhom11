@page "/khachhang"

@using System.Globalization
@inject NavigationManager NavigationManager

<link href="/css/KhachHang.css" rel="stylesheet" />

<div class="card">
    <div class="top-controls">
        <div>
            <input type="text" placeholder="🔍 Tìm kiếm tên hoặc sđt hoặc email" @bind="SearchTerm" @bind:event="oninput" />
            <button class="btn" @onclick="ExportExcel">Xuất Excel</button>
        </div>
        <button class="btn" @onclick="NavigateToCreate">+ Tạo khách hàng</button>
    </div>

    <div class="filters">
        <label>
            Giới tính:
            <select @bind="SelectedGender">
                <option value="">Tất cả</option>
                <option value="Nam">Nam</option>
                <option value="Nữ">Nữ</option>
            </select>
        </label>
        <label>
            Trạng thái:
            <select @bind="SelectedStatus">
                <option value="">Tất cả</option>
                <option value="Hoạt động">Hoạt động</option>
                <option value="Ngưng hoạt động">Ngưng hoạt động</option>
            </select>
        </label>
    </div>

    <table>
        <thead>
            <tr>
                <th>STT</th>
                <th>Code</th>
                <th>Email</th>
                <th>Họ tên</th>
                <th>Ngày sinh</th>
                <th>Số điện thoại</th>
                <th>Giới tính</th>
                <th>Trạng thái</th>
                <th>Thao tác</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var (c, index) in FilteredCustomers.Select((c, i) => (c, i)))
            {
                <tr>
                    <td>@(index + 1)</td>
                    <td>@c.Code</td>
                    <td>@c.Email</td>
                    <td>@c.Name</td>
                    <td>@FormatDate(c.DOB)</td>
                    <td>@c.Phone</td>
                    <td>@c.Gender</td>
                    <td><span class="status">@c.Status</span></td>
                    <td>
                        <button class="btn-action" @onclick="() => ViewCustomer(c.Code)">👁️ Xem</button>
                        <button class="btn-action" @onclick="() => EditCustomer(c.Code)">✏️ Sửa</button>
                        <button class="btn-action" @onclick="() => DeleteCustomer(c.Code)">🗑️ Xóa</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private List<Customer> Customers = new()
    {
        new() { Code = "KH7", Email = "nhatnguyendzpro@gmail.com", Name = "Nguyễn Văn Nhật", DOB = DateTime.Parse("1990-01-01"), Phone = "0261748212", Gender = "Nam", Status = "Hoạt động" },
        new() { Code = "KH6", Email = "anhle@gmail.com", Name = "Anh Lê", DOB = DateTime.Parse("2001-12-20"), Phone = "0562718362", Gender = "Nam", Status = "Hoạt động" },
        new() { Code = "KH5", Email = "tuongtrieu@gmail.com", Name = "Tường Triệu", DOB = DateTime.Parse("2000-12-20"), Phone = "0253718362", Gender = "Nam", Status = "Hoạt động" },
        new() { Code = "KH4", Email = "quynhtrang123@gmail.com", Name = "Quỳnh Trang", DOB = DateTime.Parse("2001-12-20"), Phone = "0452716382", Gender = "Nữ", Status = "Hoạt động" },
        new() { Code = "KH3", Email = "nguyenthithuyduong948@gmail.com", Name = "Nguyễn Thị Thùy Dương", DOB = DateTime.Parse("2023-12-20"), Phone = "0647536475", Gender = "Nam", Status = "Hoạt động" }
    };

    private string SearchTerm = string.Empty;
    private string SelectedGender = string.Empty;
    private string SelectedStatus = string.Empty;

    private IEnumerable<Customer> FilteredCustomers => Customers.Where(c =>
        (string.IsNullOrWhiteSpace(SearchTerm) ||
         c.Name.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ||
         c.Email.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ||
         c.Phone.Contains(SearchTerm)) &&
        (string.IsNullOrWhiteSpace(SelectedGender) || c.Gender == SelectedGender) &&
        (string.IsNullOrWhiteSpace(SelectedStatus) || c.Status == SelectedStatus)
    );

    private string FormatDate(DateTime d) => d.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);

    private void NavigateToCreate()
    {
        NavigationManager.NavigateTo("/themkhachhang");
    }

    private void ExportExcel()
    {
        // TODO: Implement export function
        Console.WriteLine("Export Excel clicked");
    }

    private void ViewCustomer(string code)
    {
        // TODO: Implement view customer logic
        Console.WriteLine($"View customer with code: {code}");
    }

    private void EditCustomer(string code)
    {
        // TODO: Implement edit customer logic
        Console.WriteLine($"Edit customer with code: {code}");
    }

    private void DeleteCustomer(string code)
    {
        // TODO: Implement delete customer logic
        Console.WriteLine($"Delete customer with code: {code}");
    }

    private class Customer
    {
        public string Code { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public DateTime DOB { get; set; }
        public string Phone { get; set; } = string.Empty;
        public string Gender { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
    }
}
