@page "/banhang"
@layout AdminLayout
@inject IXuLyDiaChi xuLyDiaChi
@inject IVoucherService voucherService
@inject IHoaDonService HoaDonService
@inject IJSRuntime JS
@using API.Models.DTO.BanHang
@using API.Models.DTO
@using API.Models.DTO.HeThong

<link href="css/BanHang.css" rel="stylesheet" />
<div class="sell-container">
    <!-- Tabs đơn hàng -->
    <div class="order-tabs">
        @foreach (var order in Orders.Select((value, index) => new { value, index }))
        {
            <div class="order-tab @(order.index == CurrentOrderIndex ? "active" : "")" @onclick="@(() => SwitchOrder(order.index))">
                Đơn hàng @(order.index + 1)
                @if (order.value.Products.Count > 0)
                {
                    <span class="order-qty-badge">@order.value.Products.Sum(p => p.Quantity)</span>
                }
                <span class="close" @onclick="() => RemoveOrderSafe(order.index)">×</span>
            </div>
        }

        <button class="create-order-btn" @onclick="CreateOrder">+ Tạo đơn hàng</button>
    </div>
    @if (Orders.Count == 0)
    {
        <div class="empty-order-notice">
            Bạn chưa có đơn hàng nào.
            <button class="create-order-btn" @onclick="CreateOrder">+ Tạo đơn hàng đầu tiên</button>
        </div>
    }

    <!-- Thanh công cụ sản phẩm -->
    @if (CurrentOrder != null)
    {
        <div class="order-actions">
            <div class="order-list-title">Sản phẩm</div>
            <div class="order-actions-buttons">
                <button class="qr-btn" @onclick="ScanQRCode">📷 Quét QR sản phẩm</button>
                <button class="add-btn" @onclick="() => IsProductModalVisible = true">Thêm sản phẩm</button>
                    <ProductSelect Visible="@IsProductModalVisible"
                                   OnAddProduct="HandleAddProduct"
                                   OnClose="@(() => IsProductModalVisible = false)" />
            </div>
        </div>
    }
    @if (CurrentOrder != null)
    {
    <!-- Danh sách sản phẩm trong đơn hàng -->
        <div class="order-list @OrderListClass">
            @if (CurrentOrder?.Products.Count == 0)
            {
                <div>Chưa có sản phẩm nào trong đơn hàng</div>
            }
            else
            {
                @foreach (var product in CurrentOrder.Products)
                {
                    <div class="order-item">
                        <img src="@product.Img" class="order-img" />
                        <div class="item-info">
                            <div class="order-name">@product.TenGiay</div>
                            <div class="order-price">
                                <span class="old-price">@FormatMoney((int)product.OldPrice)</span>
                                <span class="new-price">@FormatMoney((int)product.NewPrice)</span>
                            </div>
                            <div class="order-size">Size: @product.Size</div>
                        </div>
                        <div class="order-qty">
                            <button class="decrease-btn" @onclick="() => DecreaseQuantity(product)">-</button>
                            <input class="qty-input" type="number" value="@product.Quantity" readonly />
                            <button class="increase-btn" @onclick="() => IncreaseQuantity(product)">+</button>
                        </div>
                        <div class="order-total">@FormatMoney(product.Quantity * (int)product.NewPrice)</div>
                        <button class="order-remove" @onclick="() => RemoveProduct(product)">×</button>
                    </div>
                }

            }
        </div>
    }

    <!-- Khách hàng -->
    @if (CurrentOrder != null)
    {
        <div class="customer-header">
            <span class="customer-title">
                Khách hàng: <span class="customer-name">@(ReceiverName == null ? ReceiverName : "Khách lẻ") </span>
                <button type="button" class="address-change-btn"
                        style="display:none; margin-left:8px; background:#ff9800; color:#fff; border:none; border-radius:4px; padding:4px 8px; font-size:12px; cursor:pointer;">
                    Chọn địa chỉ
                </button>
            </span>
            <button class="choose-customer-btn" @onclick="() => IsCustomerModalVisible = true">+ CHỌN KHÁCH HÀNG</button>
            <CustomerSelect Visible="@IsCustomerModalVisible"
                            OnCustomerSelected="HandleCustomerSelected"
                            OnClose="@(() => IsCustomerModalVisible = false)" />
            @if (ReceiverName != null)
            {
                <button class="reset-customer-btn" @onclick="@Khachle"
                        style="display:none; margin-left:8px; background:#e0e0e0; color:#333; border:none; border-radius:6px; padding:8px 16px; cursor:pointer; font-weight:500;height:40px;">
                    Đổi về khách lẻ
                </button>
            }
        </div>
        
    }


    <!-- Footer đặt hàng -->
    @if (CurrentOrder != null)
    {
        @if (CurrentOrder?.Customer != null && IsDelivery)
        {
            <button class="address-change-btn" @onclick="() => IsProductModalVisible = true">Chọn địa chỉ</button>
            <AddressSelect Visible="@IsAddressModalVisible"
                           
                           OnAddressSelected="HandleAddressSelected"
                           OnClose="@(() => IsAddressModalVisible = false)" />
        }

        <div class="order-footer">
            @if (IsDelivery)
            {

                <div class="customer-info">
                    <div class="customer-info-row">
                        <div>
                            <label>Tên người nhận</label>
                            <input type="text" class="receiver-name-input" @bind="ReceiverName" />
                        </div>
                        <div>
                            <label>Số điện thoại</label>
                            <input type="text" class="receiver-phone-input" @bind="ReceiverPhone" />
                        </div>
                    </div>
                    <div class="customer-info-row">
                        <div class="customer-info-row">
                            <div>
                                <label for="TinhThanh">Tỉnh/Thành phố</label>
                                <input id="TinhThanh" @onchange="OnTinhChanged" style="cursor:pointer" list="Tinh" class="province-input">
                                <datalist id="Tinh" class="dropdown-address">
                                    @foreach (var t in TinhThanh)
                                    {
                                        <option value="@t.Ten"></option>
                                    }
                                </datalist>

                            </div>
                            <div>
                                <label for="QuanHuyen">Quận/Huyện</label>
                                <input id="QuanHuyen" @onchange="OnHuyenChanged" disabled="@(!HuyenXa.Any())" style="cursor:pointer" list="Quan" class="province-input" />
                                <datalist id="Quan" class="dropdown-address">
                                    @foreach (var h in HuyenXa)
                                    {
                                        <option value="@h.Ten">@h.Ten</option>
                                    }
                                </datalist>
                            </div>
                            <div>
                                <label for="XaPhuongThiTran">Xã/Phường/Thị trấn</label>
                                <input id="XaPhuongThiTran" disabled="@(!XaPhuong.Any())" style="cursor:pointer" list="XaPhuong" />
                                <datalist id="XaPhuong" class="dropdown-address">
                                    @foreach (var x in XaPhuong)
                                    {
                                        <option>@x.Ten</option>
                                    }
                                </datalist>
                            </div>
                        </div>
                    </div>
                    <div class="customer-info-row">
                        <div style="flex:2; position:relative;">
                            <label>Địa chỉ cụ thể</label>
                            <input type="text" class="address-detail-input" placeholder="Địa chỉ cụ thể">
                        </div>
                        <div style="flex:1;">
                            <label>Ghi chú</label>
                            <input type="text" class="note-input" placeholder="Ghi chú">
                        </div>
                    </div>
                </div>
            }

            <div class="order-info">
                <div style="text-align: right; margin-bottom: 12px;">
                    <label for="GiaoHang">Giao hàng</label>
                    <input id="GiaoHang" type="checkbox" class="delivery-toggle" @bind="IsDelivery" />
                </div>

                <div class="voucher-area">
                    <label style="display: none;visibility: hidden;" for="voucher" class="sr-only">Phiếu giảm giá</label>
                    <input style="cursor:pointer" @onchange="OnVoucherChange" list="PhieuGiamGia" id="voucher" type="text" class="voucher-input" placeholder="Phiếu giảm giá" />
                    <datalist id="PhieuGiamGia">
                        @foreach (var x in vouchers)
                        {
                            <option>@x.TenVoucher</option>
                        }
                    </datalist>
                    <label style="display: none;visibility: hidden;" for="discount" class="sr-only">Phần trăm giảm</label>
                    <input disabled type="text" value="@($"{DiscountPercent} %")" class="discount-input" />
                    
                </div>

                <div class="order-summary">
                    <div class="order-row">
                        <span>Tiền hàng</span>
                        <span>@FormatMoney(Subtotal)</span>
                    </div>
                    <div class="order-row">
                        <span>Phí vận chuyển</span>
                        <span>@FormatMoney(ShippingFee)</span>
                    </div>
                    <div class="order-row">
                        <span>Giảm giá</span>
                        <span>@FormatMoney(DiscountAmount)</span>
                    </div>
                    <div class="order-row total">
                        <span>Tổng số tiền</span>
                        <span>@FormatMoney(TotalAmount)</span>
                    </div>
                    <div class="order-row">
                        <span>Khách thanh toán:</span>
                        <input class="pay-input" type="text" @bind="CustomerPay" />
                    </div>
                    <div class="order-row deficit">
                        <span>Tiền thiếu</span>
                        <span>@FormatMoney(DeficitAmount)</span>
                    </div>
                    <button class="confirm-btn" @onclick="ConfirmOrder">XÁC NHẬN ĐẶT HÀNG</button>
                </div>
            </div>
        </div>
    }
</div>

@code {

    private string OrderListClass => CurrentOrder?.Products?.Count == 0 ? "empty" : "";

    // 📦 Dữ liệu đơn hàng
    private List<Order> Orders = new(); 
    private int CurrentOrderIndex = 0;
    private Order? CurrentOrder =>
    Orders != null && Orders.Count > 0 && CurrentOrderIndex < Orders.Count
    ? Orders[CurrentOrderIndex]
    : null;


    // 📞 Thông tin nhận hàng
    private string ReceiverName { get; set; } = "";
    private string ReceiverPhone { get; set; } = "";
    private string AddressDetail { get; set; } = "";
    private bool IsDelivery { get; set; } = false;

    // 💰 Tính toán đơn hàng
    private float DiscountPercent { get; set; } = 0;
    private float CustomerPay { get; set; } = 0;

    private float Subtotal => CurrentOrder?.Products?.Sum(p => p.Quantity * p.NewPrice) ?? 0f;
    private float ShippingFee => IsDelivery ? 0f : 0f;
    private float DiscountAmount => (Subtotal * DiscountPercent) / 100f;
    private float TotalAmount => Subtotal + ShippingFee - DiscountAmount;
    private float DeficitAmount => TotalAmount - CustomerPay;

    private List<DiaChi> TinhThanh = new();
    private List<DiaChi> HuyenXa = new();
    private List<DiaChi> XaPhuong = new();
    private List<Voucher> vouchers = new();

    string selectedTinh;
    string selectedHuyen;

    // 🛒 Hành động
    private async void CreateOrder()
    {

        if (Orders.Count >= 5)
        {
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                toast = true,
                position = "top-end",
                icon = "info",
                title = "Bạn đã tạo tối đa 5 đơn hàng.",
                showConfirmButton = false,
                timer = 3000,
                timerProgressBar = true
            });
            return;
        }
        Orders.Add(new Order());
        CurrentOrderIndex = Orders.Count - 1;
        StateHasChanged();
    }

    private void RemoveOrder(int index)
    {
        if (Orders.Count < 1)
        {
            Orders = new() { new Order() };
            CurrentOrderIndex = 0;
            return;
        }

        Orders.RemoveAt(index);

        if (index <= CurrentOrderIndex && CurrentOrderIndex > 0)
        {
            CurrentOrderIndex--;
        }

        if (CurrentOrderIndex >= Orders.Count)
        {
            CurrentOrderIndex = Orders.Count - 1;
        }
    }

    private bool IsRemovingOrder = false;

    private async Task RemoveOrderSafe(int index)
    {
        var result = await JS.InvokeAsync<SwalResult>("Swal.fire", new
        {
            title = "Xác nhận xóa đơn hàng",
            text = "Bạn có chắc muốn xác nhận đơn hàng này?",
            icon = "question",
            showCancelButton = true,
            confirmButtonText = "Xác nhận",
            cancelButtonText = "Huỷ"
        });

        if (result.IsConfirmed)
        {
            if (IsRemovingOrder) return;
            IsRemovingOrder = true;

            RemoveOrder(index);
            await Task.Delay(200);
            IsRemovingOrder = false;
        }
    }


    private void SwitchOrder(int index)
    {
        CurrentOrderIndex = index;
    }

    private void IncreaseQuantity(ProductOrder product)
    {
        product.Quantity++;
    }

    private void DecreaseQuantity(ProductOrder product)
    {
        if (product.Quantity > 1)
            product.Quantity--;
    }

    private void RemoveProduct(ProductOrder product)
    {
        CurrentOrder.Products.Remove(product);
    }

    protected override void OnInitialized()
    {
        Orders ??= new();
    }



    private void ScanQRCode()
    {
        // TODO: QR
    }

    private void ResetCustomer()
    {
        CurrentOrder.Customer = null;
        ReceiverName = "";
        ReceiverPhone = "";
    }

    private async void ConfirmOrder()
    {
        if (CurrentOrder.Products.Count == 0)
        {
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                icon = "warning",
                title = "Chưa thêm sản phẩm",
                text = "Đơn hàng chưa được thêm sản phẩm."
            });
            return;
        }

        if (IsDelivery)
        {
            if (string.IsNullOrWhiteSpace(ReceiverName) || string.IsNullOrWhiteSpace(ReceiverPhone))
            {
                // Thông báo thiếu thông tin
                return;
            }

            if (!System.Text.RegularExpressions.Regex.IsMatch(ReceiverPhone, @"^\d{9,11}$"))
            {
                // Số điện thoại không hợp lệ
                return;
            }
        }
        if (CustomerPay < TotalAmount)
        {
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                icon = "warning",
                title = "Chưa đủ tiền!",
                text = $"Khách còn thiếu {FormatMoney(TotalAmount - CustomerPay)}",
                confirmButtonText = "OK"
            });
            return;
        }

        // ✅ Thành công

        var hoaDon = new HoaDon
        {
            HoaDonId = Guid.NewGuid(),
            KhachHangId = CurrentOrder.Customer?.KhachHangId,
            TenCuaKhachHang = ReceiverName,
            SDTCuaKhachHang = ReceiverPhone,
            EmailCuaKhachHang = CurrentOrder.Customer?.Email ?? "",
            NgayTao = DateTime.Now,
            NgayNhanHang = DateTime.Now.AddDays(2), // hoặc nhập từ UI
            TongTienSauKhiGiam = TotalAmount,
            TrangThai = "Chờ xác nhận",
            GhiChu = "", // hoặc lấy từ UI
            HoaDonChiTiets = CurrentOrder.Products.Select(p => new HoaDonChiTiet
            {
                GiayId = p.GiayId,
                SoLuongSanPham = p.Quantity,
                Gia = (decimal)p.NewPrice
            }).ToList()
        };
        var result = await HoaDonService.Add(hoaDon);

        if (result)
        {
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                icon = "success",
                title = "Thành công",
                text = "Đơn hàng đã được ghi nhận."
            });
            RemoveOrder(CurrentOrderIndex);
        }
        else
        {
            await JS.InvokeVoidAsync("Swal.fire",  new
            {
                icon = "warning",
                title = "Lỗi!",
                text = "Có lỗi khi lưu đơn hàng."
            });
        }
    }

    private string FormatMoney(float amount)
    {
        return string.Format("{0:N0} VND", amount);
    }
    private bool IsProductModalVisible = false;

    private void HandleAddProduct(GiayChiTietDTO item)
    {
        if (CurrentOrder == null) return;

        CurrentOrder.Products.Add(new ProductOrder
        {
            GiayId = item.GiayId,
            TenGiay = item.TenGiay ?? "Không tên",
            Quantity = item.SoLuongCon,
            Price = item.Gia
        });
    }

    private bool IsCustomerModalVisible = false;
    private List<DiaChiKhachHang> diaChiKhachHangs = new();
    private async Task HandleCustomerSelected(KhachHang kh)
    {
        CurrentOrder.Customer = kh;

        if (IsDelivery)
        {
            ReceiverName = kh.HoTen;
            ReceiverPhone = kh.SoDienThoai;
            // Có thể gán địa chỉ mặc định nếu bạn muốn
        }

    }
    private void Khachle()
    {
        CurrentOrder.Customer = null;
    }

    private bool IsAddressModalVisible = false;

    private void HandleAddressSelected(DiaChiKhachHang diaChi)
    {
        CurrentOrder.Address = diaChi;

        // Nếu bạn muốn gán giá trị về form giao hàng
        if (IsDelivery)
        {
            ReceiverName = CurrentOrder.Customer?.HoTen ?? "";
            ReceiverPhone = CurrentOrder.Customer?.SoDienThoai ?? "";
            AddressDetail = diaChi.TenDiaChi;
        }

    }

    protected override async Task OnInitializedAsync()
    {
        TinhThanh = await xuLyDiaChi.ParseDiaChiAsync("wwwroot/Files/ThanhPho.txt");
        vouchers = await voucherService.GetAll();
    }

    void OnTinhChanged(ChangeEventArgs e)
    {
        selectedTinh = e.Value?.ToString();
        var tinh = TinhThanh.FirstOrDefault(t => t.Ten == selectedTinh);
        HuyenXa = tinh?.Con ?? new();
        XaPhuong = new();
    }

    void OnHuyenChanged(ChangeEventArgs e)
    {
        selectedHuyen = e.Value?.ToString();
        var huyen = HuyenXa.FirstOrDefault(h => h.Ten == selectedHuyen);
        XaPhuong = huyen?.Con ?? new();
    }
    void OnVoucherChange(ChangeEventArgs e)
    {
        string selectedVoucher = e.Value?.ToString()?.Trim();

        var voucher = vouchers.FirstOrDefault(v => v.TenVoucher == selectedVoucher);

        if (voucher != null)
        {
            DiscountPercent = voucher.PhanTram;
        }
        else
        {
            DiscountPercent = 0; 
        }
    }

}
