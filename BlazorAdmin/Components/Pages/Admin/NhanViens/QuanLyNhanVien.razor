@page "/QuanLyNhanVien"
@rendermode InteractiveServer
@using Data.Models;
@using BlazorAdmin.Service;
@using BlazorAdmin.Service.IService
@inject INhanVienService service;
@inject ITaiKhoanService TKservice;
@inject NavigationManager manager;
@inject IJSRuntime JS;

<h3>DanhSachNhanVien</h3>
<div class="d-flex justify-content-center mb-4">
	<div class="input-group rounded shadow-sm" style="max-width: 500px; border: 1px solid #ced4da;">
		<span class="input-group-text bg-white border-0">
			<i class="bi bi-search text-secondary"></i>
		</span>
		<input type="text"
			   class="form-control border-0 shadow-none"
			   placeholder="Nh·∫≠p t√™n nh√¢n vi√™n ƒë·ªÉ t√¨m ki·∫øm..."
			   @bind="searchKeyword"
			   @bind:event="oninput"
			   style="font-size: 1rem;" />
		<button class="btn btn-primary rounded-end" @onclick="Search" type="button">
			<i class="bi bi-arrow-right-circle me-1"></i> T√¨m
		</button>
	</div>
</div>
<style>
	.input-group .form-control:focus {
		box-shadow: none;
	}

	.btn-primary {
		transition: background-color 0.3s ease, transform 0.2s ease;
	}

		.btn-primary:hover {
			background-color: #0b5ed7;
			transform: translateY(-1px);
		}

	.input-group-text {
		background-color: #f8f9fa;
	}
</style>

@{
	int stt = 1;
}
<button class="btn btn-primary" @onclick="NavigateToCreate">T·∫°o m·ªõi +</button>

<table class="table">
	<thead>
		<tr>
			<td>STT</td>
			<td>HoTen</td>
			<td>S·ªë ƒëi·ªán tho·∫°i</td>
			<td>Email</td>
			<td>Ng√†y sinh</td>
			<td>Ch·ª©c v·ª•</td>
			<td>Ng√†y c·∫≠p nh·∫≠t cu·ªëi</td>
			<td>Tr·∫°ng Th√°i</td>
			<td>Hanh Dong</td>
		</tr>
	</thead>
	<tbody>
		@foreach (var item in NhanViens)
		{
			<tr>
				<td>@stt</td>
				<td>@item.HoTen</td>
				<td>@item.SoDienThoai</td>
				<td>@item.Email</td>
				<td>@item.NgaySinh.ToString("dd/MM/yyyy")</td>
				<td>@(item.ChucVu != null ? item.ChucVu.MotaChucVu : "Kh√¥ng c√≥ ch·ª©c v·ª•")</td>
				<td>@item.NgayCapNhatCuoiCung</td>
				<td>
					<button class="btn btn-sm @(item.TrangThai ? "btn-danger" : "btn-success") me-2"
							@onclick="() => ToggleTrangThai(item.NhanVienId)">
						üîÑ
					</button>
					 <span class="badge @(item.TrangThai ? "bg-success" : "bg-danger")">
						@(item.TrangThai ? "ƒêang ho·∫°t ƒë·ªông" : "Ng·ª´ng ho·∫°t ƒë·ªông")
                </span>
				</td>
				<td>
					<button class="btn btn-primary" @onclick="() => NavigateToEdit(item.NhanVienId)">Edit</button>
					<button class="btn btn-warning" @onclick="() => DeleteAsyncNhanVien(item.NhanVienId)">Delete</button>


				</td>
			</tr>
			stt++;
		}
	</tbody>
</table>

@code {
	private List<NhanVien> NhanViens;
	private string searchKeyword = "";
	private readonly Guid adminId = Guid.Parse("88888888-8888-8888-8888-888888888888");
	protected override async Task OnInitializedAsync()
	{
		if (NhanViens == null)
		{
			NhanViens = new List<NhanVien>();

		}
		NhanViens = await service.GetAllNhanVienAsync();
		await LoadNhanViensAsync();
	}
	private async Task LoadNhanViensAsync()
	{
		var allNhanViens = await service.GetAllNhanVienAsync();
		NhanViens = allNhanViens.Where(x => x.NhanVienId != adminId).ToList();
	}



	protected void NavigateToCreate()
	{
		manager.NavigateTo("/AddNhanVien");
	}
	protected void NavigateToEdit(Guid id)
	{
		manager.NavigateTo($"/EditNhanVien/{id}");
	}

	private async Task DeleteAsyncNhanVien(Guid id)
	{
		var deleNhanVien = await JS.InvokeAsync<bool>("confirm", $"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a kh√¥ng?");
		if (deleNhanVien)
		{
			// L·∫•y nh√¢n vi√™n ƒë·ªÉ l·∫•y th√¥ng tin t√†i kho·∫£n
			var nhanVien = await service.GetByIdNhanVienAsync(id);
			if (nhanVien != null)
			{
				// N·∫øu c√≥ t√†i kho·∫£n th√¨ x√≥a t√†i kho·∫£n tr∆∞·ªõc
				if (nhanVien.TaikhoanId.HasValue)
				{
					await TKservice.DeleteTaiKhoanAsync(nhanVien.TaikhoanId.Value);
				}

				// X√≥a nh√¢n vi√™n
				await service.DeleteNhanVienAsync(id);
				await LoadNhanViensAsync();
				StateHasChanged();
			}
		}
	}

	private async Task ToggleTrangThai(Guid id)
	{
		var nhanVien = NhanViens.FirstOrDefault(x => x.NhanVienId == id);
		if (nhanVien != null)
		{

			nhanVien.TrangThai = !nhanVien.TrangThai;
			nhanVien.NgayCapNhatCuoiCung = DateTime.Now;


			await service.UpdateNhanVienAsync(nhanVien);
			await LoadNhanViensAsync();
			StateHasChanged();
		}
	}

	private async Task Search()
	{
		if (string.IsNullOrWhiteSpace(searchKeyword))
		{
			await LoadNhanViensAsync(); // lu√¥n lo·∫°i admin
		}
		else
		{
			var result = await service.SearchNhanVien(searchKeyword);
			NhanViens = result.Where(x => x.NhanVienId != adminId).ToList(); // lo·∫°i admin kh·ªèi k·∫øt qu·∫£ t√¨m
		}
	}



}