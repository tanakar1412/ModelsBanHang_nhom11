@page "/Admin/AddVoucher"
@rendermode InteractiveServer

@using Data.Models
@using BlazorAdmin.Service.IService
@using System.ComponentModel.DataAnnotations

@inject IVoucherService service
@inject IKhachHangService khachHangService
@inject IKhachHangVoucherService khachHangVoucherService
@inject NavigationManager manager

<h3>🎁 Thêm Voucher mới</h3>

<EditForm Model="Input" OnValidSubmit="SubmitFormCreate">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Tên Voucher:</label>
        <InputText class="form-control" @bind-Value="Input.TenVoucher" />
    </div>

    <div class="mb-3">
        <label class="form-label">Ngày bắt đầu:</label>
        <InputDate class="form-control" @bind-Value="Input.NgayBatDau" />
    </div>

    <div class="mb-3">
        <label class="form-label">Ngày kết thúc:</label>
        <InputDate class="form-control" @bind-Value="Input.NgayKetThuc" />
    </div>

    <div class="mb-3">
        <label class="form-label">Giá trị giảm:</label>
        <div class="input-group">
            <InputNumber class="form-control" @bind-Value="GiaTriGiam" />
            <button class="btn @(IsPhanTram ? "btn-primary" : "btn-outline-secondary")"
                    @onclick="() => DoiKieuGiamGia(true)">
                %
            </button>
            <button class="btn @(!IsPhanTram ? "btn-primary" : "btn-outline-secondary")"
                    @onclick="() => DoiKieuGiamGia(false)">
                ₫
            </button>
        </div>
        @if (!string.IsNullOrEmpty(LoiSoTienGiam))
        {
            <div class="text-danger mt-1">@LoiSoTienGiam</div>
        }
    </div>

    <div class="mb-3">
        <label class="form-label">Số lượng:</label>
        <InputNumber class="form-control" @bind-Value="Input.SoLuong" />
    </div>

    <div class="mb-3">
        <label class="form-label">Điều kiện giảm:</label>
        <InputNumber class="form-control" @bind-Value="Input.DieuKienToiThieu" />
    </div>

    <div class="mb-3">
        <label class="form-label">Giảm tối đa:</label>
        <InputNumber class="form-control" @bind-Value="Input.GiamToiDa" />
    </div>

    <div class="mb-3">
        <label class="form-label">Gán cho khách hàng:</label>
        <div class="border p-2 rounded" style="max-height: 250px; overflow-y: auto;">
            @foreach (var kh in DanhSachKhachHang)
            {
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="@kh.KhachHangId"
                           @onchange="e => ToggleKhachHang(kh.KhachHangId, (bool)e.Value!)" />
                    <label class="form-check-label" for="@kh.KhachHangId">
                        @kh.HoTen (@kh.Email)
                    </label>
                </div>
            }
        </div>
    </div>

    <button type="submit" class="btn btn-success">Thêm mới</button>
</EditForm>

@code {
    private InputModel Input { get; set; } = new();
    private string? LoiSoTienGiam;
    private bool IsPhanTram = true;

    private List<KhachHang> DanhSachKhachHang = new();

    private float? GiaTriGiam
    {
        get => IsPhanTram ? Input.PhanTram : Input.SoTienGiam;
        set
        {
            if (IsPhanTram)
            {
                Input.PhanTram = value ?? 0;
                Input.SoTienGiam = 0;
            }
            else
            {
                Input.SoTienGiam = value ?? 0;
                Input.PhanTram = 0;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        DanhSachKhachHang = await khachHangService.GetAll();
    }

    private void DoiKieuGiamGia(bool laPhanTram)
    {
        if (IsPhanTram != laPhanTram)
        {
            IsPhanTram = laPhanTram;
            GiaTriGiam = null;
        }
    }

    private void ToggleKhachHang(Guid id, bool isChecked)
    {
        if (isChecked)
        {
            if (!Input.KhachHangIds.Contains(id))
                Input.KhachHangIds.Add(id);
        }
        else
        {
            Input.KhachHangIds.Remove(id);
        }
    }

    private async Task SubmitFormCreate()
    {
        LoiSoTienGiam = null;

        if (IsPhanTram)
        {
            var soTienTuPhanTram = (Input.PhanTram / 100f) * Input.DieuKienToiThieu;
            if (soTienTuPhanTram > Input.GiamToiDa)
            {
                Input.PhanTram = (Input.GiamToiDa / Input.DieuKienToiThieu) * 100f;
            }
        }
        else
        {
            if (Input.SoTienGiam > Input.GiamToiDa)
            {
                LoiSoTienGiam = "Số tiền giảm không được vượt quá giảm tối đa.";
                return;
            }
        }

        var newVoucher = new Voucher
            {
                VoucherId = Guid.NewGuid(),
                TenVoucher = Input.TenVoucher,
                NgayBatDau = Input.NgayBatDau,
                NgayKetThuc = Input.NgayKetThuc,
                PhanTram = Input.PhanTram,
                SoTienGiam = Input.SoTienGiam,
                GiamToiDa = Input.GiamToiDa,
                DieuKienToiThieu = Input.DieuKienToiThieu,
                TrangThai = true,
                SoLuong = Input.SoLuong
            };

        await service.Add(newVoucher);

        if (Input.KhachHangIds.Any())
        {
            await khachHangVoucherService.AssignMultipleAsync(newVoucher.VoucherId, Input.KhachHangIds);
        }

        manager.NavigateTo("/Admin/voucher");
    }

    private sealed class InputModel
    {
        [Required]
        public string TenVoucher { get; set; } = string.Empty;

        [Required]
        public DateTime NgayBatDau { get; set; } = DateTime.Today;

        [Required]
        public DateTime NgayKetThuc { get; set; } = DateTime.Today.AddDays(7);

        [Range(0, 100)]
        public float PhanTram { get; set; }

        public float SoTienGiam { get; set; }
        public float GiamToiDa { get; set; }
        public float DieuKienToiThieu { get; set; }

        [Range(1, int.MaxValue)]
        public int SoLuong { get; set; }

        public List<Guid> KhachHangIds { get; set; } = new();
    }
}
