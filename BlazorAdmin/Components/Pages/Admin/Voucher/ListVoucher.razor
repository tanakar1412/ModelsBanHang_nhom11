@page "/Admin/voucher"
@using Data.Models
@using BlazorAdmin.Service.IService
@inject IVoucherService service
@inject NavigationManager manager
@inject IJSRuntime JS

<h3 class="mb-3">🎟️ Quản lý Voucher</h3>

<div class="card shadow-sm p-4">
    <div class="d-flex justify-content-between mb-3">
        <input class="form-control w-50" placeholder="🔍 Tìm tên voucher..." @bind="searchText" @bind:event="oninput" />
        <button class="btn btn-warning text-dark fw-bold" @onclick="NavigateToCreate">
            <i class="bi bi-plus-circle me-1"></i> Tạo mới
        </button>
    </div>

    <table class="table table-bordered table-hover text-center align-middle">
        <thead class="table-light">
            <tr>
                <th>#</th>
                <th>Tên Voucher</th>
                <th>Ngày bắt đầu</th>
                <th>Ngày kết thúc</th>
                <th>Loại</th>
                <th style="width: 250px;">Trạng thái</th>
                <th>Số lượng</th>
                <th>Giảm tối đa</th>
                <th>Điều kiện tối thiểu</th>
                <th>Hành động</th>
            </tr>
        </thead>
        <tbody>
            @if (PagedList.Count == 0)
            {
                <tr>
                    <td colspan="10" class="text-muted">Không có dữ liệu.</td>
                </tr>
            }
            else
            {
                @foreach (var (item, index) in PagedList.Select((x, i) => (x, i)))
                {
                    var isExpired = item.NgayKetThuc < DateTime.Now;
                    var badgeClass = item.TrangThai
                    ? (isExpired ? "bg-secondary" : "bg-success")
                    : "bg-danger";

                    var trangThaiHienThi = !item.TrangThai
                    ? "Ngừng hoạt động"
                    : isExpired ? "Hết hạn" : "Đang diễn ra";

                    <tr>
                        <td>@((CurrentPage - 1) * PageSize + index + 1)</td>
                        <td>@item.TenVoucher</td>
                        <td>@item.NgayBatDau:dd/MM/yyyy</td>
                        <td>@item.NgayKetThuc:dd/MM/yyyy</td>
                        <td>
                            @if (item.PhanTram > 0)
                            {
                                @($"{item.PhanTram}%")
                            }
                            else if (item.SoTienGiam > 0)
                            {
                                @($"{item.SoTienGiam:N0} ₫")
                            }
                            else
                            {
                                <span class="text-muted">Không có</span>
                            }
                        </td>
                        <td>
                            <i class="bi bi-arrow-repeat @(item.TrangThai ? "text-danger" : "text-success") me-2"
                               style="cursor: @(isExpired ? "not-allowed" : "pointer"); opacity: @(isExpired ? "0.5" : "1")"
                               title="Chuyển trạng thái"
                               @onclick="@(isExpired ? null : () => ToggleTrangThai(item.VoucherId))"></i>

                            <span class="badge @badgeClass">
                                @(trangThaiHienThi == "Đang diễn ra" ? "✅" :
                                    trangThaiHienThi == "Ngừng hoạt động" ? "❌" : "⏰")
                                @trangThaiHienThi
                            </span>
                        </td>
                        <td>@item.SoLuong</td>
                        <td><span class="text-success">@item.GiamToiDa.ToString("N0") ₫</span></td>
                        <td><span class="text-danger">@item.DieuKienToiThieu.ToString("N0") ₫</span></td>
                        <td>
                            <i class="bi bi-pencil-square text-warning me-2"
                               @onclick='@(() => NavigateToEdit(item.VoucherId))'
                               title="Sửa"></i>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {
    private List<Voucher> Vouchers = new();
    private string searchText = "";
    private int CurrentPage = 1;
    private int PageSize = 10;

    private List<Voucher> Filtered => string.IsNullOrWhiteSpace(searchText)
        ? Vouchers
        : Vouchers.Where(v => v.TenVoucher.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();

    private List<Voucher> PagedList => Filtered.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();

    protected override async Task OnInitializedAsync()
    {
        Vouchers = await service.GetAll();
    }

    private void NavigateToCreate() =>
        manager.NavigateTo("/Admin/AddVoucher");

    private void NavigateToEdit(Guid id) =>
        manager.NavigateTo($"/Admin/updatevoucher/{id}");

    private async Task ToggleTrangThai(Guid id)
    {
        var voucher = Vouchers.FirstOrDefault(x => x.VoucherId == id);
        if (voucher != null && voucher.NgayKetThuc >= DateTime.Now)
        {
            voucher.TrangThai = !voucher.TrangThai;
            await service.Update(voucher);
            StateHasChanged();
        }
    }
}
