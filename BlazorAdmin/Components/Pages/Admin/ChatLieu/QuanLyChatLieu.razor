@page "/chatlieu"
@rendermode InteractiveServer
@using BlazorAdmin.Service.IService
@using BlazorBootstrap

@* @inject IJSRuntime JS *@
@inject IChatLieuService ChatLieuService

@* <Modal @ref="modal" /> *@

@* <Button Color="ButtonColor.Primary" @onclick="ShowEmployeeComponent">Show Employee Component</Button>
 *@

@* <Modal @ref="modal" title="Modal title" UseStaticBackdrop="true" CloseOnEscape="false">
    <BodyTemplate>
        I will not close if you click outside me. Don't even try to press escape key.
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
        <Button Color="ButtonColor.Primary">Understood</Button>
    </FooterTemplate>
</Modal> *@

<Button Color="ButtonColor.Warning" @onclick="() => ShowModal(ModalType.Warning)">Show Primary Modal</Button>


<Accordion>
    <AccordionItem>
        <TitleTemplate>
            <Icon Name="IconName.HouseFill" Class="me-1" /> Accordion Item #1
        </TitleTemplate>
        <Content>
            <b>This is the first item's accordion body.</b> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.
        </Content>
    </AccordionItem>
    <AccordionItem>
        <TitleTemplate>
            <Icon Name="IconName.PersonFill" Class="me-1" /> Accordion Item #2
        </TitleTemplate>
        <Content>
            <b>This is the second item's accordion body.</b> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.
        </Content>
    </AccordionItem>
    <AccordionItem>
        <TitleTemplate>
            <Icon Name="IconName.PhoneFill" Class="me-1" /> Accordion Item #3
        </TitleTemplate>
        <Content>
            <b>This is the third item's accordion body.</b> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.
        </Content>
    </AccordionItem>
</Accordion>

@* 
<div class="container mt-5">
    <h2 class="text-success mb-4">Quản lý Chất Liệu</h2>

    <button class="btn btn-success mb-3" @onclick="ShowEmployeeComponent">
        <i class="fa fa-plus"></i> Thêm chất liệu
    </button>

    <table class="table table-bordered table-hover align-middle">
        <thead class="table-success">
            <tr>
                <th>#</th>
                <th>Tên chất liệu</th>
                <th>Mô tả</th>
                <th>Trạng thái</th>
                <th>Hành động</th>
            </tr>
        </thead>
        <tbody>
            @if (DanhSachChatLieu.Any())
            {
                @foreach (var (item, index) in DanhSachChatLieu.Select((value, i) => (value, i + 1)))
                {
                    <tr>
                        <td>@index</td>
                        <td>@item.TenChatLieu</td>
                        <td>@item.MoTa</td>
                        <td>
                            <span class="badge @(item.TrangThai ? "bg-success" : "bg-secondary")">
                                @(item.TrangThai ? "Đang sử dụng" : "Ngừng sử dụng")
                            </span>
                        </td>
                        <td>
                            <button class="btn btn-sm btn-warning me-2" @onclick="() => EditChatLieu(item)">
                                <i class="fa fa-edit"></i>
                            </button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="5" class="text-center text-muted">Chưa có dữ liệu</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<ChatLieuModal IsOpen="@IsModalOpen"
               IsEdit="@IsEdit"
               @bind-TenChatLieu="@TenChatLieu"
               @bind-MoTa="@MoTa"
               @bind-TrangThai="@TrangThai"
               OnClose="CloseModal"
               OnSaved="HandleSave" /> *@

@code {
    private List<ChatLieuModel> DanhSachChatLieu = new();

    private bool IsModalOpen = false;
    private bool IsEdit = false;

    private string TenChatLieu;
    private string MoTa;
    private bool TrangThai;

    private Guid? EditingId = null;
    [Inject] ModalService ModalService { get; set; } = default!;

    private async Task ShowModal(ModalType modalType)
    {
        var modalOption = new ModalOption
        {
            Title = "Modal title",
            Message = "Modal body text goes here.",
            Type = modalType,
        };

        await ModalService.ShowAsync(modalOption);
    }

    private void ShowModal()
    {
        TenChatLieu = string.Empty;
        MoTa = string.Empty;
        TrangThai = true;
        EditingId = null;
        IsEdit = false;
        IsModalOpen = true;
    }

    private void EditChatLieu(ChatLieuModel item)
    {
        TenChatLieu = item.TenChatLieu;
        MoTa = item.MoTa;
        TrangThai = item.TrangThai;
        EditingId = item.Id;
        IsEdit = true;
        IsModalOpen = true;
    }

    private void CloseModal()
    {
        IsModalOpen = false;
    }

    private void HandleSave((string Ten, string MoTa, bool TrangThai) result)
    {
        if (IsEdit && EditingId.HasValue)
        {
            var existing = DanhSachChatLieu.FirstOrDefault(x => x.Id == EditingId.Value);
            if (existing != null)
            {
                existing.TenChatLieu = result.Ten;
                existing.MoTa = result.MoTa;
                existing.TrangThai = result.TrangThai;
            }
        }
        else
        {
            DanhSachChatLieu.Add(new ChatLieuModel
            {
                Id = Guid.NewGuid(),
                TenChatLieu = result.Ten,
                MoTa = result.MoTa,
                TrangThai = result.TrangThai
            });
        }

        CloseModal();
    }

    private class ChatLieuModel
    {
        public Guid Id { get; set; }
        public string TenChatLieu { get; set; }
        public string MoTa { get; set; }
        public bool TrangThai { get; set; }
    }
}