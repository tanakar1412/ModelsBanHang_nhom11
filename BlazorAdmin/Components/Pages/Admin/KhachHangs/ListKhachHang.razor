@page "/KhachHang"
@rendermode InteractiveServer

@using Data.Models
@using BlazorAdmin.Service
@using BlazorAdmin.Service.IService
@inject IKhachHangService service
@inject NavigationManager manager
@inject IJSRuntime JS
<link href="/css/site.css" rel="stylesheet" />

<div class="container mt-5">
    <h4 class="mb-3">üë• Danh s√°ch kh√°ch h√†ng</h4>

    <div class="card shadow-sm p-4">
        <!-- T√¨m ki·∫øm & n√∫t -->
        <div class="d-flex justify-content-between mb-3">
            <div class="input-group rounded shadow-sm" style="max-width: 500px; border: 1px solid #ced4da;">
                <span class="input-group-text bg-white border-0">
                    <i class="bi bi-search text-secondary"></i>
                </span>
                <input type="text"
                       class="form-control border-0 shadow-none"
                       placeholder="üîç Nh·∫≠p t√™n kh√°ch h√†ng ƒë·ªÉ t√¨m ki·∫øm..."
                       @bind="searchKeyword"
                       @bind:event="oninput"
                       style="font-size: 1rem;" />
                <button class="btn btn-outline-primary rounded-end" @onclick="Search" type="button">
                    <i class="bi bi-arrow-right-circle me-1"></i> T√¨m
                </button>
            </div>
            <button class="btn btn-outline-primary" @onclick="NavigateToCreate">‚ûï T·∫°o m·ªõi</button>
        </div>

        <!-- B·∫£ng d·ªØ li·ªáu -->
        <table class="table table-bordered table-hover">
            <thead class="table-light">
                <tr>
                    <th style="width: 60px;">STT</th>
                    <th>H·ªç t√™n</th>
                    <th>S·ªë ƒëi·ªán tho·∫°i</th>
                    <th>Email</th>
                    <th>Ng√†y sinh</th>
                    <th>Ng√†y t·∫°o</th>
                    <th>Ng√†y c·∫≠p nh·∫≠t</th>
                    <th>Tr·∫°ng th√°i</th>
                    <th style="width: 120px;">Ch·ª©c nƒÉng</th>
                </tr>
            </thead>
            <tbody>
                @if (!khachHangs.Any())
                {
                    <tr>
                        <td colspan="9" class="text-center text-muted">Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng n√†o.</td>
                    </tr>
                }
                else
                {
                    int stt = 1;
                    <!-- S·ª≠a l·ªói RZ1010: X√≥a @{
                    } -->
                    @foreach (var item in khachHangs)
                    {
                        <tr>
                            <td>@stt</td>
                            <td>@item.HoTen</td>
                            <td>@item.SoDienThoai</td>
                            <td>@item.Email</td>
                            <td>@item.NgaySinh.ToString("dd/MM/yyyy")</td>
                            <td>@item.NgayTao.ToString("dd/MM/yyyy")</td>
                            <td>@item.NgayCapNhatCuoiCung.ToString("dd/MM/yyyy")</td>
                            <td>
                                <i class="bi bi-arrow-repeat @(item.TrangThai ? "text-danger" : "text-success") me-2" style="cursor: pointer;" title="Chuy·ªÉn tr·∫°ng th√°i" @onclick="() => ToggleTrangThai(item.KhachHangId)"></i>
                                <span>@(item.TrangThai ? "ƒêang ho·∫°t ƒë·ªông" : "Ng·ª´ng ho·∫°t ƒë·ªông")</span>
                            </td>
                            <td>
                                <i class="bi bi-pencil-square text-primary me-2" style="cursor: pointer;" title="S·ª≠a" @onclick="() => NavigateToEdit(item.KhachHangId)"></i>
                                <i class="bi bi-trash text-danger" style="cursor: pointer;" title="X√≥a" @onclick="() => DeleteKhachHangAsync(item.KhachHangId)"></i>
                            </td>
                        </tr>
                        stt++;
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<style>
    .input-group .form-control:focus {
        box-shadow: none;
    }

    .btn-primary, .btn-outline-primary {
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

        .btn-primary:hover, .btn-outline-primary:hover {
            background-color: #0b5ed7;
            transform: translateY(-1px);
        }

    .input-group-text {
        background-color: #f8f9fa;
    }
</style>

@code {
    private List<KhachHang> khachHangs;
    private string searchKeyword = "";
    protected override async Task OnInitializedAsync()
    {
        if (khachHangs == null)
        {
            khachHangs = new List<KhachHang>();
        }
        khachHangs = await service.GetAll();
    }

    protected void NavigateToCreate()
    {
        manager.NavigateTo("/AddKhachHang");
    }
    protected void NavigateToEdit(Guid id)
    {
        manager.NavigateTo($"/EditKhachHang/{id}");
    }

    private async Task DeleteKhachHangAsync(Guid id)
    {
        var deleKhacHang = await JS.InvokeAsync<bool>("confirm", $"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a kh√¥ng?");
        if (deleKhacHang)
        {
            await service.Delete(id);
            khachHangs = await service.GetAll();
            StateHasChanged();
        }
    }
    private async Task ToggleTrangThai(Guid id)
    {
        var khachHang = khachHangs.FirstOrDefault(x => x.KhachHangId == id);
        if (khachHang != null)
        {
            khachHang.TrangThai = !khachHang.TrangThai;
            khachHang.NgayCapNhatCuoiCung = DateTime.Now;
            await service.Update(khachHang);
            StateHasChanged();
        }
    }
    private async Task Search()
    {
        if (string.IsNullOrWhiteSpace(searchKeyword))
        {
            khachHangs = await service.GetAll();
        }
        else
        {
            khachHangs = await service.SearchKhachHangAsync(searchKeyword);
        }
    }
}