@using API.Models.DTO
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthProvider
@inject IJSRuntime JSRuntime

<link href="css/Sidebar.css" rel="stylesheet" />
<style>
    .dropdown-avatar {
        padding: 12px 18px;
        cursor: pointer;
        transition: background 0.2s;}

    .dropdown-item {
        padding: 12px 18px;
        cursor: pointer;
        transition: background 0.2s;
    }
</style>
<div class="page">
    <div class="sidebar">
        <NavAdmin />
    </div>

    <div class="main">
        <div class="header d-flex align-items-center justify-content-between px-3">
            <div class="breadcrumb">@breadcrumbText</div>

            <div class="user-area d-flex align-items-center gap-3">
                <span class="bell" @onclick="ToggleBellDropdown">
                    🔔<span class="badge">2</span>
                    @if (showBellDropdown)
                    {
                        <div class="dropdown-bell">
                            <div class="bell-title">Thông báo mới</div>
                            <hr>
                            <div class="dropdown-item">Thông báo 1</div>
                            <div class="dropdown-item">Thông báo 2</div>
                        </div>
                    }
                </span>

                <img class="avatar" @onclick="ToggleAvatarDropdown"
                     src="https://preview.redd.it/can-someone-give-the-the-fish-for-calm-zone-i-only-need-v0-ke9mz4262ase1.jpeg?width=640&crop=smart&auto=webp&s=2f1bab5cdbf8a2bab087b716d46f3eecd7044917"
                     alt="user" />


                @if (showAvatarDropdown)
                {
                    <div class="dropdown-avatar">
                        <div class="dropdown-item" @onclick="GotoProfile">Thông tin tài khoản</div>
                        <div class="dropdown-item" @onclick="ShowLogoutConfirm">Đăng xuất</div>
                    </div>
                }
            </div>
        </div>

        <div class="dashboard-content">
            @Body
        </div>
    </div>
</div>

<!-- Modal xác nhận đăng xuất -->
@if (showLogoutConfirm)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Xác nhận đăng xuất</h5>
                    <button type="button" class="btn-close" @onclick="HideLogoutConfirm"></button>
                </div>
                <div class="modal-body">
                    <p>Bạn có chắc chắn muốn đăng xuất?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideLogoutConfirm">Hủy</button>
                    <button type="button" class="btn btn-primary" @onclick="Logout">Đăng xuất</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool showBellDropdown = false;
    private bool showAvatarDropdown = false;
    private bool showLogoutConfirm = false; // Biến trạng thái cho modal xác nhận
    private string breadcrumbText = "Dashboard";

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        UpdateBreadcrumb(NavigationManager.Uri);
    }

    private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        UpdateBreadcrumb(e.Location);
    }

    private void UpdateBreadcrumb(string uri)
    {
        var relativePath = NavigationManager.ToBaseRelativePath(uri);
        if (string.IsNullOrWhiteSpace(relativePath))
        {
            breadcrumbText = "Dashboard";
            return;
        }

        var segments = relativePath
            .Split("/", StringSplitOptions.RemoveEmptyEntries)
            .Select(Capitalize);

        breadcrumbText = "Dashboard / " + string.Join(" / ", segments);
    }

    private string Capitalize(string input)
    {
        return string.IsNullOrWhiteSpace(input) ? "" :
               char.ToUpper(input[0]) + input.Substring(1).ToLower();
    }

    // ✅ Đã cập nhật ID theo yêu cầu
    private Guid LoggedInUserId = Guid.Parse("99999999-9999-9999-9999-999999999999");


    private void ToggleBellDropdown()
    {
        showBellDropdown = !showBellDropdown;
        if (showBellDropdown) showAvatarDropdown = false;
    }

    private void ShowLogoutConfirm()
    {
        showLogoutConfirm = true;
        showAvatarDropdown = false;
    }

    private void HideLogoutConfirm()
    {
        showLogoutConfirm = false;
    }

    private async Task Logout()
    {
        // Nếu có authToken đang lưu
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "authToken");

        if (AuthProvider is CustomAuthenticationStateProvider customProvider)
        {
            customProvider.MarkUserAsLoggedOut();
        }

        showLogoutConfirm = false;

        // Reload toàn trang để reset interop và renderer
        NavigationManager.NavigateTo("/", true);
    }

    private void ToggleAvatarDropdown()
    {
        showAvatarDropdown = !showAvatarDropdown;
        if (showAvatarDropdown) showBellDropdown = false;
    }

    private void GotoProfile()
    {
        showAvatarDropdown = false;
        NavigationManager.NavigateTo("/ThongTinAdmin");
    }
}